datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated" // Example custom output directory
}

enum UserRole {
  STUDENT
  TEACHER
  SCHOOLSTAFF
  ADMIN
  PARENT
}

enum Gender {
  Male
  Female
  Other
}

// ----------------------------------------- USER ------------------------------------------------
// user account
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(STUDENT)
  password      String?
  username      String?         @unique
  bio           String?
  age           DateTime?
  disabled      Boolean         @default(false)
  gender        Gender?
  phone         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Student       Student[]
  Teacher       Teacher[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Class Class[]

  Post Post[]

  sendUserRequest SendUserRequest[]
}

// account for use create this for auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// session this for auth
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// verification this for auth
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// education we support  example in rwanda : REB

model Education {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  username    String   @unique
  description String?
  symbol      String?
  disabled    Boolean  @default(false)
  roles       String[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Sector Sector[]
  Trade  Trade[]
}

// sector for education example in rwanda : Primary
model Sector {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  education_id String  @db.ObjectId
  username     String  @unique
  name         String
  description  String?
  symbol       String?
  disabled     Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  education Education   @relation(fields: [education_id], references: [id], onDelete: Cascade)
  ClassRoom ClassRoom[]
  Class     Class[]
}

// trade we support example in rwanda : Level 3 education SOD : software development
model Trade {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  username    String  @unique
  description String?
  sector_id   String  @db.ObjectId
  max_classes Int
  min_classes Int
  symbol      String?
  disabled    Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sector Education @relation(fields: [sector_id], references: [id], onDelete: Cascade)

  ClassRoom ClassRoom[]
  Class     Class[]
}

enum ClassRoomType {
  Default
  Other
}

// class room example primary 1 create but space-together
model ClassRoom {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String        @unique
  description     String?
  symbol          String?
  disabled        Boolean       @default(false)
  class_room_type ClassRoomType @default(Other)
  sector_id       String?       @db.ObjectId
  tradeId         String?       @db.ObjectId
  code            String?       @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  trade  Trade?  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  sector Sector? @relation(fields: [sector_id], references: [id], onDelete: Cascade)

  Class Class[]

  Subject Subject[]
}

enum ClassType {
  SCHOOLCLASS
  PRIVET
  PUBLIC
}

// class room which user created
model Class {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String     @unique
  description   String?
  code          String     @unique
  symbol        String?
  disabled      Boolean    @default(false)
  sector_id     String?    @db.ObjectId
  trade_id      String?    @db.ObjectId
  class_room_id String?    @db.ObjectId
  user_id       String     @db.ObjectId
  classType     ClassType? @default(PRIVET)
  students      String[]   @db.ObjectId
  sub_class     SubClass[]
  teachers_ids  String[]   @db.ObjectId

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  trade     Trade?     @relation(fields: [trade_id], references: [id], onDelete: Cascade)
  sector    Sector?    @relation(fields: [sector_id], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  classRoom ClassRoom? @relation(fields: [class_room_id], references: [id], onDelete: Cascade)

  Post Post[]

  Subject Subject[]
  Model   Module[]

  sendUserRequest SendUserRequest[]
  Student         Student[]
}

// class user create which but have other class
model SubClass {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  class_id String @db.ObjectId
  code     String
  name     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  class      Class?   @relation(fields: [class_id], references: [id], onDelete: Cascade)
}

// ---------------------------------------- CLASS MEMBER ------------------------------------------------
model Student {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String  @db.ObjectId
  subClass_id String? @db.ObjectId
  class_id    String? @db.ObjectId

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  User?  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  class Class? @relation(fields: [class_id], references: [id], onDelete: Cascade)
}

enum TeacherROLE {
  CLASSTEACHER
  TEACHER
}

// teacher in that class room user create
model Teacher {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String      @db.ObjectId
  classes_ids String[]    @db.ObjectId
  role        TeacherROLE @default(TEACHER)
  Models_ids  String[]    @db.ObjectId

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Subject    Subject[]
  module     Module[]
}

enum SendUserRequestType {
  JOINCLASS
  TEACHERjOINCLASS
  STUDENTJOINCLASS
}

// request to ask teacher to join class
model SendUserRequest {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String               @db.ObjectId
  user_id     String?              @db.ObjectId
  description String?
  class_id    String?              @db.ObjectId
  email       String?
  role        UserRole?
  seen        Boolean              @default(false)
  type        SendUserRequestType?
  message     String?
  accept      Boolean?             @default(false)
  cancel      Boolean?             @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  class Class? @relation(fields: [class_id], references: [id], onDelete: Cascade)
  User  User?  @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

// model Request
// post in class 
enum PostRole {
  NOTES
  IMAGE
  VIDEO
  POST
  ACTIVITY
  TEXT
}

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id  String   @db.ObjectId
  file     String?
  content  String?
  role     PostRole @default(POST)
  class_id String?  @db.ObjectId

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  User?  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  class Class? @relation(fields: [class_id], references: [id], onDelete: Cascade)
}

// ------------------------------------- SUBJECT ----------------------------------------------------------
enum SubjectType {
  GENERAL
}

model Subject {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  classRoomId       String?             @db.ObjectId
  class_id          String?             @db.ObjectId
  code              String              @unique
  sector_id         String?             @db.ObjectId
  tradeId           String?             @db.ObjectId
  subjectType       SubjectType?
  curriculum        String?
  copyright         String?
  learningHours     Int?
  issueDate         DateTime?
  purpose           String?
  symbol            String?
  knowledge         Knowledge[]
  Resource          Resource[]
  Competence        Competence[]
  Assessment        Assessment[]
  LearningOutcome   LearningOutcome[]
  IndicativeContent IndicativeContent[]
  Skill             Skill[]
  Attitude          Attitude[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  class      Class?     @relation(fields: [class_id], references: [id], onDelete: Cascade)
  classRoom  ClassRoom? @relation(fields: [class_id], references: [id], onDelete: Cascade)
  Note       Note[]
  Model      Module[]
  Teacher    Teacher?   @relation(fields: [teacher_id], references: [id])
  teacher_id String?    @db.ObjectId
}

model LearningOutcome {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  Subject_id        String              @db.ObjectId
  learningHours     Int?
  description       String?
  indicativeContent IndicativeContent[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject Subject? @relation(fields: [Subject_id], references: [id], onDelete: Cascade)
}

model IndicativeContent {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  learningOutcomeId String @db.ObjectId
  content           String

  subject         Subject?        @relation(fields: [learningOutcomeId], references: [id], onDelete: Cascade)
  LearningOutcome LearningOutcome @relation(fields: [learningOutcomeId], references: [id], onDelete: Cascade)
}

model Knowledge {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  Subject_id  String? @db.ObjectId
  description String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject Subject? @relation(fields: [Subject_id], references: [id], onDelete: Cascade)
}

model Skill {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  Subject_id  String? @db.ObjectId
  description String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject Subject? @relation(fields: [Subject_id], references: [id], onDelete: Cascade)
}

model Attitude {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  Subject_id  String? @db.ObjectId
  description String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject Subject? @relation(fields: [Subject_id], references: [id], onDelete: Cascade)
}

enum ResourceType {
  EQUIPMENT
  MATERIAL
  TOOLS
}

model Resource {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  Subject_id  String        @db.ObjectId
  category    ResourceType?
  description String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject Subject? @relation(fields: [Subject_id], references: [id], onDelete: Cascade)
}

model Competence {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  Subject_id          String                @db.ObjectId
  description         String
  PerformanceCriteria PerformanceCriteria[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject Subject? @relation(fields: [Subject_id], references: [id], onDelete: Cascade)
}

model PerformanceCriteria {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  competence_id String @db.ObjectId
  description   String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  competence Competence? @relation(fields: [competence_id], references: [id], onDelete: Cascade)
}

enum AssessmentType {
  FORMATIVE
  SUMMATIVE
}

model Assessment {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  Subject_id String          @db.ObjectId
  type       AssessmentType?
  method     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject Subject? @relation(fields: [Subject_id], references: [id], onDelete: Cascade)
}

// notes in class and subject
model Note {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id     String   @db.ObjectId
  subject_id  String?  @db.ObjectId
  module_id   String   @db.ObjectId
  seenBy      String[] @db.ObjectId
  commentsIds String[] @db.ObjectId
  fileId      String?
  content     String   @db.ObjectId
  description String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Subject Subject? @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  Module  Module?  @relation(fields: [module_id], references: [id], onDelete: Cascade)
}

// module in class they student example : kinyarwanda,
model Module {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  teacher_id  String? @db.ObjectId
  subject_id  String  @db.ObjectId
  class_id    String  @db.ObjectId
  subClass_id String? @db.ObjectId
  user_id     String  @db.ObjectId

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  class   Class?   @relation(fields: [class_id], references: [id], onDelete: Cascade)
  Subject Subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  Teacher Teacher? @relation(fields: [teacher_id], references: [id])

  Note Note[]
}
