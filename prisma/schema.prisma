datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated" // Example custom output directory
}

enum UserRole {
  STUDENT
  TEACHER
  SCHOOLSTAFF
  ADMIN
  PARENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(STUDENT)
  password      String?
  username      String?         @unique
  bio           String?
  age           DateTime?
  disabled      Boolean         @default(false)
  gender        Gender?
  phone         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  Student       Student[]
  Teacher       Teacher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Class Class[]

  Post Post[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// model 

model Education {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  username    String   @unique
  description String?
  symbol      String?
  disabled    Boolean  @default(false)
  roles       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Sector Sector[]
  Trade  Trade[]
}

model Sector {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  educationId String  @db.ObjectId
  username    String  @unique
  name        String
  description String?
  symbol      String?
  disabled    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  education Education   @relation(fields: [educationId], references: [id], onDelete: Cascade)
  ClassRoom ClassRoom[]
  Class     Class[]
}

model Trade {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  username     String  @unique
  description  String?
  sectorId     String  @db.ObjectId
  limitClasses Int
  symbol       String?
  disabled     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sector Education @relation(fields: [sectorId], references: [id], onDelete: Cascade)

  ClassRoom ClassRoom[]
  Class     Class[]
}

enum ClassRoomType {
  DEFAULT
  OTHER
}

model ClassRoom {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String        @unique
  description   String?
  symbol        String?
  disabled      Boolean       @default(false)
  ClassRoomType ClassRoomType @default(OTHER)
  sectorId      String?       @db.ObjectId
  tradeId       String?       @db.ObjectId
  code          String?       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trade  Trade?  @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  sector Sector? @relation(fields: [sectorId], references: [id], onDelete: Cascade)

  Class Class[]

  Subject Subject[]
}

enum ClassType {
  SCHOOLCLASS
  PRIVET
  PUBLIC
}

model Class {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  username    String     @unique
  description String?
  code        String     @unique
  symbol      String?
  disabled    Boolean    @default(false)
  sectorId    String?    @db.ObjectId
  tradeId     String?    @db.ObjectId
  classRoomId String?    @db.ObjectId
  userId      String     @db.ObjectId
  classType   ClassType? @default(PRIVET)
  Student     Student[]
  SubClass    SubClass[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trade        Trade?     @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  sector       Sector?    @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  classTeacher ClassRoom? @relation(fields: [classRoomId], references: [id], onDelete: Cascade)

  Post Post[]

  Subject Subject[]
}

model SubClass {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  classId String @db.ObjectId
  code    String
  name    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class?   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Student {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  subClassId String?
  classId    String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class? @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Teacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  classesId String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  subjectId   String   @db.ObjectId
  seenBy      String[] @db.ObjectId
  commentsIds String[] @db.ObjectId
  fileId      String?  @db.ObjectId
  content     String   @db.ObjectId
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PostRole {
  NOTES
  IMAGE
  VIDEO
  POST
  ACTIVITY
  TEXT
}

model Post {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @db.ObjectId
  file    String?
  content String?
  role    PostRole @default(POST)
  classId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class? @relation(fields: [classId], references: [id], onDelete: Cascade)
}

enum SubjectType {
  GENERAL
}

model Subject {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  classRoomId       String?             @db.ObjectId
  classId           String?             @db.ObjectId
  code              String              @unique
  sector            String?             @db.ObjectId
  trade             String?             @db.ObjectId
  subjectType       SubjectType?
  curriculum        String?
  copyright         String?
  learningHours     Int?
  issueDate         DateTime?
  purpose           String?
  symbol            String?
  knowledge         Knowledge[]
  Resource          Resource[]
  Competence        Competence[]
  Assessment        Assessment[]
  LearningOutcome   LearningOutcome[]
  IndicativeContent IndicativeContent[]
  Skill             Skill[]
  Attitude          Attitude[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class     Class?     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classRoom ClassRoom? @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model LearningOutcome {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  SubjectId         String              @db.ObjectId
  learningHours     Int?
  description       String?
  indicativeContent IndicativeContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject? @relation(fields: [SubjectId], references: [id], onDelete: Cascade)
}

model IndicativeContent {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  learningOutcomeId String @db.ObjectId
  content           String

  subject         Subject?        @relation(fields: [learningOutcomeId], references: [id], onDelete: Cascade)
  LearningOutcome LearningOutcome @relation(fields: [learningOutcomeId], references: [id], onDelete: Cascade)
}

model Knowledge {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  SubjectId   String? @db.ObjectId
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject? @relation(fields: [SubjectId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  SubjectId   String? @db.ObjectId
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject? @relation(fields: [SubjectId], references: [id], onDelete: Cascade)
}

model Attitude {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  SubjectId   String? @db.ObjectId
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject? @relation(fields: [SubjectId], references: [id], onDelete: Cascade)
}

enum ResourceType {
  EQUIPMENT
  MATERIAL
  TOOLS
}

model Resource {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  SubjectId   String        @db.ObjectId
  category    ResourceType?
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject? @relation(fields: [SubjectId], references: [id], onDelete: Cascade)
}

model Competence {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  SubjectId           String                @db.ObjectId
  description         String
  PerformanceCriteria PerformanceCriteria[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject? @relation(fields: [SubjectId], references: [id], onDelete: Cascade)
}

model PerformanceCriteria {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  competenceId String @db.ObjectId
  description  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competence Competence? @relation(fields: [competenceId], references: [id], onDelete: Cascade)
}

enum AssessmentType {
  FORMATIVE
  SUMMATIVE
}

model Assessment {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  SubjectId String          @db.ObjectId
  type      AssessmentType?
  method    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject? @relation(fields: [SubjectId], references: [id], onDelete: Cascade)
}
